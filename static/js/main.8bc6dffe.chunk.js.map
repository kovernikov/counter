{"version":3,"sources":["components/Display.tsx","components/Buttons.tsx","components/DisplayCounter.tsx","components/Input.tsx","components/SettingDisplay.tsx","components/CounterSettings.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Display","React","memo","props","active","state","className","Button","disabled","onClick","callback","title","DisplayCounter","useState","setState","Input","value","label","console","log","s","number","type","onChange","e","currentTarget","error","input","SettingsDisplay","maxNum","minNum","helpMessage","changeMaxValue","changeMinValue","counter_wrapper","CounterSettings","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"gRAmBO,IAAMA,EAAUC,IAAMC,MAX7B,SAA0BC,GAEtB,IAAMC,EAAyB,IAAhBD,EAAME,MAAc,SAAW,GAE9C,OACI,6BACI,2BAAG,uBAAGC,UAAWF,GAASD,EAAME,YCKrC,IAAME,EAASN,IAAMC,MAR5B,SAAyBC,GACrB,OACI,6BACI,4BAAQK,SAAUL,EAAMK,SAAUC,QAASN,EAAMO,UAAWP,EAAMQ,WCevE,IAAMC,EAAiBX,IAAMC,MAxBpC,WACI,MAA0BW,mBAAiB,GAA3C,mBAAOR,EAAP,KAAcS,EAAd,KAUA,OACI,yBAAKR,UAAU,OACX,yBAAKA,UAAU,WACX,kBAACN,EAAD,CAASK,MAAOA,KAEpB,yBAAKC,UAAU,QACX,kBAAEC,EAAF,CAASI,MAAO,MAAOH,SAAoB,IAAVH,EAA4BK,SAd7D,WACRI,EAAST,EAAQ,IAamEA,MAAOA,IACnF,kBAAEE,EAAF,CAASI,MAAO,QAASH,SAAoB,IAAVH,EAA4BK,SAX7D,WACVI,EAAS,IAU+ET,MAAOA,S,gCCE1FU,EAAQd,IAAMC,MAfsB,SAAC,GAAyC,IAAxCc,EAAuC,EAAvCA,MAAON,EAAgC,EAAhCA,SAAUJ,EAAsB,EAAtBA,UAAWW,EAAW,EAAXA,MAE3E,OADAC,QAAQC,IAAI,4BAER,yBAAKb,UAAWc,IAAEC,QACd,+BAAQJ,EACJ,2BAAOK,KAAK,SACLN,MAAOA,EACPO,SAAU,SAACC,GAAD,OAAOd,GAAUc,EAAEC,cAAcT,QAC3CV,UAAWA,EAAS,UAAMc,IAAEM,MAAR,YAAiBN,IAAEO,OAAUP,IAAEO,aCY7DC,EAAkB3B,IAAMC,MAlBgC,SAAC,GAAkE,IAAjE2B,EAAgE,EAAhEA,OAAQC,EAAwD,EAAxDA,OAAOC,EAAiD,EAAjDA,YAAaC,EAAoC,EAApCA,eAAgBC,EAAoB,EAApBA,eAE/G,OACI,yBAAK3B,UAAWc,IAAEc,iBACd,kBAACnB,EAAD,CAAOC,MAAOa,EACPnB,SAAUsB,EACV1B,UAAWyB,EACXd,MAAO,eAEd,kBAACF,EAAD,CAAOC,MAAOc,EACPpB,SAAUuB,EACV3B,UAAWyB,EACXd,MAAO,mBCTnB,IAAMkB,EAAkBlC,IAAMC,MAVrC,WACI,OACI,yBAAKI,UAAU,OACX,kBAACsB,EAAD,CAAiBC,OAAQ,EAAGC,OAAQ,EAAGC,aAAa,EAAMC,eAAgB,aAAQC,eAAgB,eAClG,yBAAK3B,UAAU,QACX,kBAAEC,EAAF,CAASI,MAAO,MAAOH,UAAU,EAAOE,SAAU,aAAQL,MAAO,SCQlE+B,MATf,WACI,OACI,yBAAK9B,UAAW,WACZ,kBAAC6B,EAAD,MACA,kBAACvB,EAAD,QCDQyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,SDqI5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA1B,GACLR,QAAQQ,MAAMA,EAAM2B,c","file":"static/js/main.8bc6dffe.chunk.js","sourcesContent":["import React from 'react';\nimport s from './Display.module.css';\n\ntype DisplayType = {\n    state: number\n\n}\n\nfunction DisplayComponent(props: DisplayType) {\n\n    const active = props.state === 5 ? 'active' : ''\n\n    return (\n        <div>\n            <b><p className={active}>{props.state}</p></b>\n        </div>\n    )\n}\n\nexport const Display = React.memo(DisplayComponent);\n","import React from 'react';\nimport s from './Button.module.css';\nimport '../App.css';\n\ntype btnType = {\n    title: string\n    callback: () => void\n    state: number\n    disabled: boolean\n}\n\nfunction ButtonComponent(props: btnType) {\n    return (\n        <div >\n            <button disabled={props.disabled} onClick={props.callback}>{props.title}</button>\n        </div>\n    )\n}\n\nexport const Button = React.memo(ButtonComponent);\n","import React, {useState} from 'react';\nimport {Display} from './Display';\nimport {Button} from './Buttons';\nimport '../App.css';\n\nfunction DisplayCounterComponent() {\n    const [state, setState] = useState<number>(0)\n\n    const inc = () => {\n        setState(state + 1);\n    }\n\n    const reset = () => {\n        setState(0)\n    }\n\n    return (\n        <div className=\"App\">\n            <div className=\"display\">\n                <Display state={state}/>\n            </div>\n            <div className=\"btns\">\n                < Button title={'inc'} disabled={state === 5 ? true : false} callback={inc} state={state}/>\n                < Button title={'reset'} disabled={state === 0 ? true : false} callback={reset} state={state}/>\n            </div>\n        </div>\n    )\n}\n\nexport const DisplayCounter = React.memo(DisplayCounterComponent);\n","import React from 'react';\nimport s from './Input.module.css'\n\ntype InputPropsType = {\n    value: number\n    callback: (value: number) => void\n    className: boolean\n    label: string\n}\n\nconst InputComponent: React.FC<InputPropsType> = ({value, callback, className, label}) => {\n    console.log('Input Component rerender')\n    return (\n        <div className={s.number}>\n            <label>{label}\n                <input type=\"number\"\n                       value={value}\n                       onChange={(e) => callback(+e.currentTarget.value)}\n                       className={className ? `${s.error} ${s.input}` : s.input}\n                />\n            </label>\n        </div>\n    )\n}\n\nexport const Input = React.memo(InputComponent)\n","import React from 'react';\nimport s from './SettingsDisplay.module.css'\nimport {Input} from './Input';\n\ntype SettingsDisplayPropsType = {\n    maxNum: number\n    minNum: number\n    helpMessage: boolean\n    changeMaxValue: (value: number) => void\n    changeMinValue: (value: number) => void\n}\n\nconst SettingsDisplayComponent: React.FC<SettingsDisplayPropsType> = ({maxNum, minNum,helpMessage, changeMaxValue, changeMinValue}) => {\n\n    return (\n        <div className={s.counter_wrapper}>\n            <Input value={maxNum}\n                   callback={changeMaxValue}\n                   className={helpMessage}\n                   label={'max value:'}\n            />\n            <Input value={minNum}\n                   callback={changeMinValue}\n                   className={helpMessage}\n                   label={'min value:'}\n            />\n        </div>\n    )\n}\n\nexport const SettingsDisplay = React.memo(SettingsDisplayComponent)\n","import {SettingsDisplay} from './SettingDisplay';\nimport React from 'react';\nimport '../App.css';\nimport {Button} from './Buttons';\n\nfunction CounterSettingsComponent() {\n    return (\n        <div className=\"App\">\n            <SettingsDisplay maxNum={1} minNum={2} helpMessage={true} changeMaxValue={()=>{}} changeMinValue={()=>{}}/>\n            <div className=\"btns\">\n                < Button title={'set'} disabled={false} callback={()=>{}} state={5}/>\n            </div>\n        </div>\n    )\n}\nexport const CounterSettings = React.memo(CounterSettingsComponent);\n","import React, {useState} from 'react';\nimport './App.css';\nimport {Display} from './components/Display';\nimport { Button } from './components/Buttons';\nimport {SettingsDisplay} from './components/SettingDisplay';\nimport {DisplayCounter} from './components/DisplayCounter';\nimport {CounterSettings} from './components/CounterSettings';\n\n\nfunction App() {\n    return (\n        <div className={'Approot'}>\n            <CounterSettings />\n            <DisplayCounter />\n        </div>\n    )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />,  document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}